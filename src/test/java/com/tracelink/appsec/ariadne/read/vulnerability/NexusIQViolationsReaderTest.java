package com.tracelink.appsec.ariadne.read.vulnerability;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;

public class NexusIQViolationsReaderTest {

	private static final String RESOURCES = "src/test/resources/";

	@Test
	public void testReadVulnerabilities() throws IOException {
		VulnerabilityReader reader = new NexusIQViolationsReader(
				RESOURCES + "vulnerability/nexus-iq-violations.csv");
		List<Map.Entry<String, Integer>> vulnerabilities = reader.readVulnerabilities();

		Assert.assertEquals(5, vulnerabilities.size());
		Assert.assertTrue(vulnerabilities.stream().anyMatch(d ->
				d.getKey().equals("org.third.party:library-b:null")
						&& d.getValue().equals(1)
		));
		Assert.assertTrue(vulnerabilities.stream().anyMatch(d ->
				d.getKey().equals("org.third.party:library-c:1.0")
						&& d.getValue().equals(2)
		));
		Assert.assertTrue(vulnerabilities.stream().anyMatch(d ->
				d.getKey().equals("library-d:library-d:2.0")
						&& d.getValue().equals(1)
		));
		Assert.assertTrue(vulnerabilities.stream().anyMatch(d ->
				d.getKey().equals("library-e:library-e:3.0")
						&& d.getValue().equals(1)
		));
		Assert.assertTrue(vulnerabilities.stream().anyMatch(d ->
				d.getKey().equals("org.third.party:library-f:foo:bar:4.0")
						&& d.getValue().equals(1)
		));
		Assert.assertFalse(vulnerabilities.stream().anyMatch(d ->
				d.getKey().equals("Component Name")
						&& d.getValue().equals(1)
		));
	}

	@Test(expected = IllegalArgumentException.class)
	public void testReadVulnerabilitiesUnknownArtifactFormat() throws IOException {
		new NexusIQViolationsReader(RESOURCES + "vulnerability/nexus-iq-violations-unknown.csv")
				.readVulnerabilities();
	}

	@Test(expected = FileNotFoundException.class)
	public void testPomExplorerReaderFileDoesNotExist() throws Exception {
		new NexusIQViolationsReader(RESOURCES + "foo.txt");
	}

	@Test(expected = FileNotFoundException.class)
	public void testPomExplorerReaderInvalidDirectory() throws Exception {
		new NexusIQViolationsReader(RESOURCES + "violations");
	}
}
